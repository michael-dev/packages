--- a/src/net.h
+++ b/src/net.h
@@ -44,6 +44,8 @@ typedef struct mac_t {
 	uint8_t x[6];
 } mac_t;
 
+typedef uint16_t vlan_t;
+
 typedef struct ipv4_t {
 	uint8_t x[4];
 } ipv4_t;
--- a/src/route.c
+++ b/src/route.c
@@ -524,20 +524,21 @@ static void age_subnets(void *data) {
 	});
 }
 
-static void learn_mac(mac_t *address) {
-	subnet_t *subnet = lookup_subnet_mac(myself, address);
+static void learn_mac(mac_t *address, vlan_t vlan_id) {
+	subnet_t *subnet = lookup_subnet_mac(myself, address, vlan_id);
 
 	/* If we don't know this MAC address yet, store it */
 
 	if(!subnet) {
-		logger(DEBUG_TRAFFIC, LOG_INFO, "Learned new MAC address %x:%x:%x:%x:%x:%x",
+		logger(DEBUG_TRAFFIC, LOG_INFO, "Learned new MAC address %x:%x:%x:%x:%x:%x in VLAN %d",
 		       address->x[0], address->x[1], address->x[2], address->x[3],
-		       address->x[4], address->x[5]);
+		       address->x[4], address->x[5], vlan_id);
 
 		subnet = new_subnet();
 		subnet->type = SUBNET_MAC;
 		subnet->expires = now.tv_sec + macexpire;
 		subnet->net.mac.address = *address;
+		subnet->net.mac.vlan = vlan_id;
 		subnet->weight = 10;
 		subnet_add(myself, subnet);
 		subnet_update(myself, subnet, true);
@@ -1028,19 +1029,31 @@ static void route_arp(node_t *source, vp
 static void route_mac(node_t *source, vpn_packet_t *packet) {
 	subnet_t *subnet;
 	mac_t dest;
+	vlan_t vlan_id;
+
+	/* detect vlan */
+	length_t ethlen = ether_size;
+	uint16_t type = packet->data[ethlen-2] << 8 | packet->data[ethlen-1];
+	if(type == ETH_P_8021Q) {
+		vlan_id = (packet->data[ethlen] & 0x0f) * 256 + packet->data[ethlen+1]; // network byte order beachten!
+		ethlen += 4;
+		type = packet->data[ethlen-2] << 8 | packet->data[ethlen-1];
+	} else {
+		vlan_id = 0;
+	}
 
 	/* Learn source address */
 
 	if(source == myself) {
 		mac_t src;
 		memcpy(&src, &DATA(packet)[6], sizeof(src));
-		learn_mac(&src);
+		learn_mac(&src, vlan_id);
 	}
 
 	/* Lookup destination address */
 
 	memcpy(&dest, &DATA(packet)[0], sizeof(dest));
-	subnet = lookup_subnet_mac(NULL, &dest);
+	subnet = lookup_subnet_mac(NULL, &dest, vlan_id);
 
 	if(!subnet || !subnet->owner) {
 		route_broadcast(source, packet);
@@ -1061,13 +1074,11 @@ static void route_mac(node_t *source, vp
 			return;
 		}
 
-	uint16_t type = DATA(packet)[12] << 8 | DATA(packet)[13];
-
 	if(priorityinheritance) {
 		if(type == ETH_P_IP && packet->len >= ether_size + ip_size) {
-			packet->priority = DATA(packet)[15];
+			packet->priority = DATA(packet)[ethlen+1];
 		} else if(type == ETH_P_IPV6 && packet->len >= ether_size + ip6_size) {
-			packet->priority = ((DATA(packet)[14] & 0x0f) << 4) | (DATA(packet)[15] >> 4);
+			packet->priority = ((DATA(packet)[ethlen] & 0x0f) << 4) | (DATA(packet)[ethlen+1] >> 4);
 		}
 	}
 
@@ -1081,12 +1092,6 @@ static void route_mac(node_t *source, vp
 
 	if(via && packet->len > via->mtu && via != myself) {
 		logger(DEBUG_TRAFFIC, LOG_INFO, "Packet for %s (%s) length %d larger than MTU %d", subnet->owner->name, subnet->owner->hostname, packet->len, via->mtu);
-		length_t ethlen = 14;
-
-		if(type == ETH_P_8021Q) {
-			type = DATA(packet)[16] << 8 | DATA(packet)[17];
-			ethlen += 4;
-		}
 
 		if(type == ETH_P_IP && packet->len > 576 + ethlen) {
 			if(DATA(packet)[6 + ethlen] & 0x40) {
--- a/src/subnet.c
+++ b/src/subnet.c
@@ -44,6 +44,11 @@ static hash_t *ipv4_cache;
 static hash_t *ipv6_cache;
 static hash_t *mac_cache;
 
+typedef struct mac_cache_entry_t {
+	mac_t address;
+	vlan_t vlan_id;
+} mac_cache_entry_t;
+
 void subnet_cache_flush(void) {
 	hash_clear(ipv4_cache);
 	hash_clear(ipv6_cache);
@@ -57,7 +62,7 @@ void init_subnets(void) {
 
 	ipv4_cache = hash_alloc(0x100, sizeof(ipv4_t));
 	ipv6_cache = hash_alloc(0x100, sizeof(ipv6_t));
-	mac_cache = hash_alloc(0x100, sizeof(mac_t));
+	mac_cache = hash_alloc(0x100, sizeof(mac_cache_entry_t));
 }
 
 void exit_subnets(void) {
@@ -116,12 +121,12 @@ subnet_t *lookup_subnet(const node_t *ow
 	return splay_search(owner->subnet_tree, subnet);
 }
 
-subnet_t *lookup_subnet_mac(const node_t *owner, const mac_t *address) {
+subnet_t *lookup_subnet_mac(const node_t *owner, const mac_t *address, const vlan_t vlan_id) {
 	subnet_t *r = NULL;
 
 	// Check if this address is cached
-
-	if((r = hash_search(mac_cache, address))) {
+	mac_cache_entry_t entry = { .address = *address, .vlan_id = vlan_id };
+	if((r = hash_search(mac_cache, &entry))) {
 		return r;
 	}
 
@@ -132,7 +137,7 @@ subnet_t *lookup_subnet_mac(const node_t
 			continue;
 		}
 
-		if(!memcmp(address, &p->net.mac.address, sizeof(*address))) {
+		if(!memcmp(address, &p->net.mac.address, sizeof *address) && (vlan_id == p->net.mac.vlan)) {
 			r = p;
 
 			if(!p->owner || p->owner->status.reachable) {
@@ -144,7 +149,7 @@ subnet_t *lookup_subnet_mac(const node_t
 	// Cache the result
 
 	if(r) {
-		hash_insert(mac_cache, address, r);
+		hash_insert(mac_cache, &entry, r);
 	}
 
 	return r;
--- a/src/subnet.h
+++ b/src/subnet.h
@@ -33,6 +33,7 @@ typedef enum subnet_type_t {
 
 typedef struct subnet_mac_t {
 	mac_t address;
+	vlan_t vlan;
 } subnet_mac_t;
 
 typedef struct subnet_ipv4_t {
@@ -82,7 +83,7 @@ extern bool maskcheck(const void *mask,
 extern bool net2str(char *netstr, int len, const subnet_t *subnet);
 extern bool str2net(subnet_t *subnet, const char *netstr);
 extern subnet_t *lookup_subnet(const struct node_t *owner, const subnet_t *subnet);
-extern subnet_t *lookup_subnet_mac(const struct node_t *owner, const mac_t *address);
+extern subnet_t *lookup_subnet_mac(const struct node_t *owner, const mac_t *address, const vlan_t vlan_id);
 extern subnet_t *lookup_subnet_ipv4(const ipv4_t *address);
 extern subnet_t *lookup_subnet_ipv6(const ipv6_t *address);
 extern bool dump_subnets(struct connection_t *c);
--- a/src/subnet_parse.c
+++ b/src/subnet_parse.c
@@ -111,6 +111,11 @@ bool maskcheck(const void *va, int maskl
 static int subnet_compare_mac(const subnet_t *a, const subnet_t *b) {
 	int result;
 
+	result = memcmp(&a->net.mac.vlan, &b->net.mac.vlan, sizeof(vlan_t));
+
+	if(result)
+		return result;
+
 	result = memcmp(&a->net.mac.address, &b->net.mac.address, sizeof(a->net.mac.address));
 
 	if(result) {
@@ -209,6 +214,7 @@ bool str2net(subnet_t *subnet, const cha
 	str[sizeof(str) - 1] = 0;
 	int consumed;
 
+	unsigned int vlan_id;
 	int weight = DEFAULT_WEIGHT;
 	char *weight_separator = strchr(str, '#');
 
@@ -249,7 +255,7 @@ bool str2net(subnet_t *subnet, const cha
 
 	uint16_t x[8];
 
-	if(sscanf(str, "%hx:%hx:%hx:%hx:%hx:%hx%n", &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &consumed) >= 6 && !str[consumed]) {
+	if(sscanf(str, "%hx:%hx:%hx:%hx:%hx:%hx@%u%n", &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &vlan_id, &consumed) >= 6 && !str[consumed]) {
 		/*
 		   Normally we should check that each part has two digits to prevent ambiguities.
 		   However, in old tinc versions net2str() will aggressively return MAC addresses with one-digit parts,
@@ -266,6 +272,8 @@ bool str2net(subnet_t *subnet, const cha
 			subnet->net.mac.address.x[i] = x[i];
 		}
 
+		subnet->net.mac.vlan = vlan_id;
+
 		return true;
 	}
 
@@ -380,13 +388,14 @@ bool net2str(char *netstr, int len, cons
 
 	switch(subnet->type) {
 	case SUBNET_MAC:
-		result = snprintf(netstr, len, "%02x:%02x:%02x:%02x:%02x:%02x",
+		result = snprintf(netstr, len, "%02x:%02x:%02x:%02x:%02x:%02x@%u",
 		                  subnet->net.mac.address.x[0],
 		                  subnet->net.mac.address.x[1],
 		                  subnet->net.mac.address.x[2],
 		                  subnet->net.mac.address.x[3],
 		                  subnet->net.mac.address.x[4],
-		                  subnet->net.mac.address.x[5]);
+		                  subnet->net.mac.address.x[5],
+				  subnet->net.mac.vlan);
 		netstr += result;
 		len -= result;
 		break;
