Description: prefer biggest expires value for subnet lookup
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 tinc (1.0.24-2~bpo70+1.10) wheezy-admindb; urgency=medium
 .
   * check expires with lookup
Author: Michael Braun <michael-dev@fami-braun.de>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- tinc-1.0.24.orig/src/subnet.c
+++ tinc-1.0.24/src/subnet.c
@@ -424,6 +424,7 @@ subnet_t *lookup_subnet_mac(const node_t
 	time_t min_lru = now + 1;
 	int base = (cache_seg ? (CACHE_SIZE / 2) : 0);
 	int cache_mac_slot = base;
+	int bestExpires = -1;
 
 	// Check if this address is cached
 
@@ -444,6 +445,8 @@ subnet_t *lookup_subnet_mac(const node_t
 			continue;
 		if(memcmp(address, &cache_mac_address[i], sizeof *address))
 			continue;
+		if(cache_mac_subnet[i] && cache_mac_subnet[i]->expires <= now)
+			continue;
 		cache_mac_lru[i] = now;
 		return cache_mac_subnet[i];
 	}
@@ -456,11 +459,20 @@ subnet_t *lookup_subnet_mac(const node_t
 		if(!p || p->type != SUBNET_MAC)
 			continue;
 
-		if(!memcmp(address, &p->net.mac.address, sizeof *address) && (vlan_id == p->net.mac.vlan)) {
-			r = p;
-			if(p->owner->status.reachable)
-				break;
-		}
+		if(memcmp(address, &p->net.mac.address, sizeof *address))
+			continue;
+
+		if(vlan_id != p->net.mac.vlan)
+			continue;
+
+		if(r && !p->owner->status.reachable && r->owner->status.reachable)
+			continue;
+
+		if(bestExpires > p->expires && p->expires != 0 && bestExpires != -1)
+			continue;
+
+		r = p;
+		bestExpires = p->expires;
 	}
 
 	// Cache the result
