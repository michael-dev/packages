--- a/src/route.c
+++ b/src/route.c
@@ -481,7 +481,7 @@ static void learn_mac(mac_t *address, vl
 	avl_node_t *node;
 	connection_t *c;
 
-	subnet = lookup_subnet_mac(myself, address, vlan_id);
+	subnet = lookup_subnet_mac(myself, address, vlan_id, 0);
 
 	/* If we don't know this MAC address yet, store it */
 
@@ -1050,9 +1050,19 @@ static void route_mac(node_t *source, vp
 	/* Lookup destination address */
 
 	memcpy(&dest, &packet->data[0], sizeof(dest));
-	subnet = lookup_subnet_mac(NULL, &dest, vlan_id);
+	subnet = lookup_subnet_mac(NULL, &dest, vlan_id, 0);
 
 	if(!subnet) {
+		/* refuse packets from others with source mac owned by us */
+		if (source != myself) {
+			mac_t src;
+			memcpy(&src, &packet->data[6], sizeof src);
+			subnet = lookup_subnet_mac(myself, &src, vlan_id, 1);
+			if(subnet && subnet->owner == myself) {
+				ifdebug(TRAFFIC) logger(LOG_WARNING, "Packet looping back to us from %s (%s)!", source->name, source->hostname);
+				return;
+			}
+		}
 		route_broadcast(source, packet);
 		return;
 	}
--- a/src/subnet.c
+++ b/src/subnet.c
@@ -444,16 +444,17 @@ subnet_t *lookup_subnet(const node_t *ow
 	return avl_search(owner->subnet_tree, subnet);
 }
 
-subnet_t *lookup_subnet_mac(const node_t *owner, const mac_t *address, const vlan_t vlan_id) {
+subnet_t *lookup_subnet_mac(const node_t *owner, const mac_t *address, const vlan_t vlan_id, int cache_seg) {
 	subnet_t *p, *r = NULL;
 	avl_node_t *n;
 	int i;
 	time_t min_lru = now + 1;
-	int cache_mac_slot = 0;
+	int base = (cache_seg ? (CACHE_SIZE / 2) : 0);
+	int cache_mac_slot = base;
 
 	// Check if this address is cached
 
-	for(i = 0; i < CACHE_SIZE; i++) {
+	for(i = base; i < base + CACHE_SIZE / 2; i++) {
 		if(!cache_mac_valid[i] && min_lru != 0) {
 			min_lru = 0;
 			cache_mac_slot = i;
--- a/src/subnet.h
+++ b/src/subnet.h
@@ -79,7 +79,7 @@ extern void subnet_update(struct node_t
 extern bool net2str(char *netstr, int len, const subnet_t *subnet);
 extern bool str2net(subnet_t *subnet, const char *netstr);
 extern subnet_t *lookup_subnet(const struct node_t *owner, const subnet_t *subnet);
-extern subnet_t *lookup_subnet_mac(const struct node_t *owner, const mac_t *address, const vlan_t vlan_id);
+extern subnet_t *lookup_subnet_mac(const struct node_t *owner, const mac_t *address, const vlan_t vlan_id, int cache_seg);
 extern subnet_t *lookup_subnet_ipv4(const ipv4_t *address);
 extern subnet_t *lookup_subnet_ipv6(const ipv6_t *address);
 extern void dump_subnets(void);
